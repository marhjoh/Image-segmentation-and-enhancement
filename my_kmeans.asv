function [seg_kmeans, centers] = my_kmeans(img, K, tolerance)
    
% Convert the input image to a double array
img_gray = double(rgb2gray(img));
% Reshape the image into a column vector

img_gray = img_gray(:);
% Initialize the cluster centers randomly
centers = rand(K, 1) * 256;
% Initialize the old centroids to be different from the new centroids
old_centers = centers + tolerance + 1;
% Loop until convergence
while norm(centers - old_centers) >= tolerance
    % Save the current centroids
    old_centers = centers;
    
% Assign each pixel to the nearest centroid
    [~, labels] = min(abs(bsxfun(@minus, img_gray, centers')), [], 2);
    
    % Update the centroids
    for k = 1:K
    centers(k) = mean(img_gray(labels == k));
    end
end
% Reshape the labels into an image
% seg_kmeans = reshape(labels, size(img_gray));
% Convert the segmented image back to the original size and format
seg_kmeans = uint8(reshape(seg_kmeans, size(img_gray, 1), size(img_gray, 2)));
end
